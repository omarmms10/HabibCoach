@model IEnumerable<HabibCoach.Models.Exercise>

<div class="container mt-4">

    <h2 class="fw-bold">Exercise Library</h2>
    <p class="text-muted">Search for existing exercises, and create your own custom exercises</p>

    <div class="d-flex justify-content-end mb-3">
        <!-- Button to trigger the modal -->
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createExerciseModal">
            + Custom Exercise
        </button>
    </div>

    <div class="modal fade" id="createExerciseModal" tabindex="-1" aria-labelledby="createExerciseModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createExerciseModalLabel">Add New Exercise</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Load the create exercise partial view and pass a new Exercise model -->
                    @await Html.PartialAsync("_CreateExercise", new HabibCoach.Models.Exercise())
                </div>
            </div>
        </div>
    </div>





    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-4">
            <div class="card p-3 shadow-sm">
                <!-- Filter Dropdowns -->
                <div class="d-flex mb-3">
                    <select class="form-select me-2" id="equipmentFilter">
                        <option value="">Equipment</option>
                        <option value="Barbell">Barbell</option>
                        <option value="Dumbbell">Dumbbell</option>
                        <option value="Machine">Machine</option>
                        <option value="Bike">Bike</option>
                    </select>
                    <select class="form-select" id="muscleFilter">
                        <option value="">Muscles</option>
                        <option value="Biceps">Biceps</option>
                        <option value="Triceps">Triceps</option>
                        <option value="Cardio">Cardio</option>
                    </select>
                    <button class="btn btn-secondary" id="clearFiltersBtn">Clear Filters</button>

                </div>


                <!-- Search Box -->
                <div class="input-group mb-3">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" id="searchExercises" placeholder="Search exercises">
                </div>

                <!-- Exercise List -->
                <div class="list-group overflow-auto" style="height: 60vh;">
                    @foreach (var exercise in Model)
                    {
                        <a href="javascript:void(0);" class="list-group-item list-group-item-action"
                           data-equipment="@exercise.Equipment"
                           onclick="loadExerciseDetails(@exercise.ExerciseId)">
                            <div class="d-flex w-100 align-items-center">
                                <img src="@exercise.Image" class="me-3" width="40" alt="@exercise.ExerciseName">
                                <div>
                                    <h5 class="mb-1">@exercise.ExerciseName</h5>
                                    <small>@exercise.PrimaryMuscleGroup</small>
                                </div>
                            </div>
                        </a>
                    }
                </div>



            </div>
        </div>

        <!-- Exercise Detail Section -->
        <div class="col-md-8">
            <!-- Default Placeholder Content -->
            <div id="defaultContent" class="text-center mt-5">
                <div class="d-flex justify-content-center">
                    <!-- SVG Icon -->
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" type="dumbbell" tint="#1780EA">
                        <path d="M11.5668 3.46056L10.1456 4.88174C9.88397 5.14337 9.89271 5.5763 10.1651 5.84871L18.057 13.7406C18.3294 14.013 18.7623 14.0217 19.0239 13.7601L20.4451 12.3389C20.7067 12.0773 20.698 11.6443 20.4256 11.3719L12.5337 3.48008C12.2613 3.20767 11.8284 3.19893 11.5668 3.46056Z" stroke="#1780EA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M12.3387 20.4437L13.7599 19.0226C14.0215 18.7609 14.0128 18.328 13.7404 18.0556L5.84856 10.1637C5.57615 9.89133 5.14322 9.8826 4.88159 10.1442L3.46041 11.5654C3.19878 11.827 3.20752 12.26 3.47993 12.5324L11.3718 20.4242C11.6442 20.6966 12.0771 20.7054 12.3387 20.4437Z" stroke="#1780EA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M13.6172 4.36865L15.3937 2.59218C15.5507 2.43513 15.7533 2.33648 15.9568 2.31793C16.1604 2.29938 16.3482 2.36245 16.4791 2.49326L21.4115 7.42566C21.5423 7.55648 21.6053 7.74433 21.5868 7.94788C21.5682 8.15143 21.4696 8.35401 21.3125 8.51106L19.5361 10.2875" stroke="#1780EA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M10.2883 19.5356L8.51186 21.3121C8.35481 21.4692 8.15222 21.5678 7.94867 21.5864C7.74512 21.6049 7.55727 21.5418 7.42646 21.411L2.49406 16.4786C2.36324 16.3478 2.30017 16.16 2.31872 15.9564C2.33727 15.7529 2.43593 15.5503 2.59298 15.3932L4.36945 13.6168" stroke="#1780EA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M10 14L14 10" stroke="#1780EA" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                    </svg>
                </div>
                <h4>Select Exercise</h4>
                <p>Start by selecting an exercise from the library</p>
            </div>


            <!-- Exercise Details Container -->
            <div id="exerciseDetails" style="display: none;">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 id="exerciseTitle">Exercise Title</h3>
                    <input type="hidden" id="selectedExerciseId" />

                    <button class="btn btn-primary" onclick="loadEditModal($('#selectedExerciseId').val())">Edit Exercise</button>


                    <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteExerciseModal">Delete Exercise</button>

                </div>

                <div class="card p-4 shadow-sm">
                    <h4>About</h4>
                    <p><strong>Equipment:</strong> <span id="exerciseEquipment"></span></p>
                    <p><strong>Primary Muscle Group:</strong> <span id="exerciseMuscle"></span></p>
                    <p><strong>Exercise Type:</strong> <span id="exerciseType"></span></p>
                </div>

                <div class="card p-4 shadow-sm mt-3">
                    <h4>Exercise Instructions</h4>
                    <ol id="exerciseInstructions"></ol>
                </div>

                <div id="videoAttachment" class="mt-3 text-muted">
                    <h4>Attachment</h4>
                    <p>There is no attachment. Edit exercise to add an attachment.</p>
                </div>
            </div>



        </div>
    </div>


</div>




<script>
    document.getElementById('createExerciseForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent default form submission

        const form = this;
        const url = form.action;
        const formData = new FormData(form);

        fetch(url, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    alert('Exercise created successfully!');
                    location.reload(); // Reload the page or refresh the list dynamically
                } else {
                    alert('Failed to create exercise.');
                }
            })
            .catch(error => console.error('Error:', error));
    });
</script>





<script>
    function loadExerciseDetails(exerciseId) {
        // Set selected exercise ID in the hidden field
        $('#selectedExerciseId').val(exerciseId);

        // Existing AJAX logic to load exercise details
        $.ajax({
            url: '/Exercises/Details/' + exerciseId,
            type: 'GET',
            success: function (data) {
                // Hide the default content and show the details section
                $('#defaultContent').hide();
                $('#exerciseDetails').show();

                // Populate exercise details
                $('#exerciseTitle').text(data.exerciseName);
                $('#exerciseEquipment').text(data.equipment);
                $('#exerciseMuscle').text(data.primaryMuscleGroup);
                $('#exerciseType').text(data.exerciseType);

                // Clear and populate instructions dynamically
                $('#exerciseInstructions').empty();
                if (data.instructions && data.instructions.length > 0) {
                    $.each(data.instructions, function (index, instruction) {
                        const listItem = `
                        <li class="d-flex align-items-start">
                            <div class="me-3">
                                <span class="badge rounded-pill bg-primary">${index + 1}</span>
                            </div>
                            <span>${instruction.trim()}</span>
                        </li>
                    `;
                        $('#exerciseInstructions').append(listItem);
                    });
                } else {
                    $('#exerciseInstructions').html('<li>No instructions available.</li>');
                }

                // Handle video attachment (if applicable)
                if (data.videoAttachment) {
                    $('#videoAttachment').html(`
                    <h4>Attachment</h4>
                    <video controls width="100%" src="${data.videoAttachment}"></video>
                `);
                } else {
                    $('#videoAttachment').html(`
                    <h4>Attachment</h4>
                    <p>No attachment available. Edit exercise to add an attachment.</p>
                `);
                }
            },
            error: function () {
                alert('Failed to load exercise details.');
            }
        });

    }


</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchExercises");
        const equipmentFilter = document.getElementById("equipmentFilter");
        const muscleFilter = document.getElementById("muscleFilter");
        const exerciseListItems = document.querySelectorAll(".list-group-item");

        function filterExercises() {
            const query = searchInput.value.toLowerCase();
            const selectedEquipment = equipmentFilter.value.toLowerCase();
            const selectedMuscle = muscleFilter.value.toLowerCase();

            exerciseListItems.forEach(item => {
                const exerciseName = item.querySelector("h5").innerText.toLowerCase();
                const primaryMuscle = item.querySelector("small").innerText.toLowerCase();
                const equipment = item.dataset.equipment.toLowerCase();

                const matchesQuery = exerciseName.includes(query) || primaryMuscle.includes(query);
                const matchesEquipment = !selectedEquipment || equipment === selectedEquipment;
                const matchesMuscle = !selectedMuscle || primaryMuscle.includes(selectedMuscle);

                if (matchesQuery && matchesEquipment && matchesMuscle) {
                    item.style.display = ""; // Show matching items
                } else {
                    item.style.display = "none"; // Hide non-matching items
                }
            });
        }

        // Clear Filters Button
        document.getElementById("clearFiltersBtn").addEventListener("click", function () {
            searchInput.value = "";          // Clear search input
            equipmentFilter.value = "";     // Reset equipment dropdown
            muscleFilter.value = "";        // Reset muscle dropdown
            filterExercises();              // Show all exercises
        });

        // Bind events for filters and search
        searchInput.addEventListener("input", filterExercises);
        equipmentFilter.addEventListener("change", filterExercises);
        muscleFilter.addEventListener("change", filterExercises);
    });
</script>


